#!/usr/bin/env bash

set -eu

CONTROLLER_NAME=sealed-secrets

parse_args() {
    for i in "$@"; do
        case $i in
            --from=*)
                FROM="${i#*=}"
                shift
            ;;
            --pubkey=*)
                PUBKEY="${i#*=}"
                shift
            ;;
            --controller-name=*)
                CONTROLLER_NAME="${i#*=}"
                shift
            ;;
            --write-to=*)
                DEST_BASE_DIR="${i#*=}"
                shift
            ;;
            *)
                echo "Unknown argument: \'$i\'"
                exit 1
            ;;
        esac
    done
}

verify_args() {
    set +u
    
    if [ -z "${FROM}" ]; then
        echo "Missing secret storage to decrypt from. Supply '--from' parameter."
        exit 1
    fi

    if [ -z "${DEST_BASE_DIR}" ]; then
        echo "Missing dir to write the sealed secrets to. Supply '--to' parameter."
        exit 1
    fi
    
    set -u
}

decrypt() {
    gpg2 --quiet -d "$1"
}

create_secrets() {
    JSON="$1"

    for k in $(echo "${JSON}" | jq '.secrets | keys | .[]'); do
        local value=$(echo "${JSON}" | jq -r ".secrets[$k]");
        local name=$(jq -r '.name' <<< "${value}");
        local namespace=$(jq -r '.namespace' <<< "${value}");
        local secret=$(jq -r '.secret' <<< "${value}");
        create_sealed_secret ${name} ${namespace} "${secret}"
    done
}

create_sealed_secret() {
    name=$1
    namespace=$2
    secret="$3"

    KUBE_SECRET=$(kubectl create secret generic ${name} --namespace ${namespace} --dry-run -o yaml --from-env-file <(echo "${secret}" | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]"))

    set +u
    if [ -n "$DEST_BASE_DIR" ] && [ ! -d "$DEST_BASE_DIR/$namespace" ]; then
        mkdir -p "$DEST_BASE_DIR/$namespace"
    fi

    if [ -z "${PUBKEY}" ]; then
        set -u
        echo "${KUBE_SECRET}" | kubeseal -o yaml --controller-name=${CONTROLLER_NAME} -w "$DEST_BASE_DIR/$namespace/$name-sealed-secret.yaml"
    else
        set -u
        echo "${KUBE_SECRET}" | kubeseal -o yaml --cert="${PUBKEY}" -w "$DEST_BASE_DIR/$namespace/$name-sealed-secret.yaml"
    fi
}

main() {
    parse_args "$@"
    verify_args
    JSON=$(decrypt "${FROM}")
    create_secrets "${JSON}"
}

main $@
